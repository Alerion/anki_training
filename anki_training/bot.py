import random
from enum import Enum

import anthropic
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from anki_training.config import settings

client = anthropic.Anthropic(api_key=settings.ANTHROPIC_API_KEY)


class DeutschLevel(str, Enum):
    B1 = "B1"
    B2 = "B2"


class DeutschTime(str, Enum):
    PR√ÑSENS = "Pr√§sens"
    PERFEKT = "Perfekt"
    PR√ÑTERITUM = "Pr√§teritum"
    FUTUR1 = "Futur I"


class State(Enum):
    IDLE = 1
    WAITING_FOR_TRANSLATION = 2
    WAITING_FOR_QUESTION = 3


# TODO
def generate_focused_sentence_prompt(session):
    context_hints = {
        "PR√ÑSENS": "–ø–æ–≤—Å—è–∫–¥–µ–Ω–Ω—ñ –¥—ñ—ó, –∑–≤–∏—á–∫–∏",
        "PERFEKT": "–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –¥—ñ—ó, –¥–æ—Å–≤—ñ–¥",
        "PR√ÑTERITUM": "—Ä–æ–∑–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –º–∏–Ω—É–ª–µ",
        "FUTUR1": "–ø–ª–∞–Ω–∏, –Ω–∞–º—ñ—Ä–∏",
    }

    return f"""–°—Ç–≤–æ—Ä–∏ —Ä–µ—á–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é ({session.level.value}):
- –ß–∞—Å: {session.tense.value} - {context_hints.get(session.tense.value, "")}
- 1-2 –ø—Ä–∏–∫–º–µ—Ç–Ω–∏–∫–∏ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω—é–≤–∞–Ω–Ω—è
- 1 –ø—Ä–∏–π–º–µ–Ω–Ω–∏–∫ –∑ —á—ñ—Ç–∫–æ—é –≤—ñ–¥–º—ñ–Ω–∫–æ—é
- –†–µ—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –∂–∏—Ç—Ç—î–≤–∏–º, –Ω–µ —à—Ç—É—á–Ω–∏–º

–¢—ñ–ª—å–∫–∏ —Ä–µ—á–µ–Ω–Ω—è, –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤."""


def start_bot():
    # python -m main start_bot
    application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("new", new_exercise))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ Bot started!")
    application.run_polling()


class UserSession:
    def __init__(self):
        self.state = State.IDLE
        self.current_sentence = ""
        self.conversation_history = []
        self.counter = 0
        self.level = None
        self.tense = None

    def reset_exercise(self):
        self.current_sentence = ""
        self.conversation_history = []
        self.level = None
        self.tense = None


user_sessions: dict[int, UserSession] = {}


def get_user_session(user_id: int) -> UserSession:
    if user_id not in user_sessions:
        user_sessions[user_id] = UserSession()
    return user_sessions[user_id]


def get_random_deutsch_level() -> DeutschLevel:
    return random.choice(list(DeutschLevel))


def get_random_deutsch_time() -> DeutschTime:
    return random.choice(list(DeutschTime))


async def call_anthropic(prompt: str, conversation_history: list = None) -> str:
    try:
        messages = []

        if conversation_history:
            messages.extend(conversation_history)

        messages.append({"role": "user", "content": prompt})

        system_prompt = """–¢–∏ –≤–∏–∫–ª–∞–¥–∞—á –Ω—ñ–º–µ—Ü—å–∫–æ—ó –¥–ª—è —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤ —Ä—ñ–≤–Ω—è B1-B2. –ü—Ä–∞–≤–∏–ª–∞:
- –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ
- –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–∫–∞—Ö: –ø–æ—Ä—è–¥–æ–∫ —Å–ª—ñ–≤, –≤—ñ–¥–º—ñ–Ω–∫–∏, –∞—Ä—Ç–∏–∫–ª—ñ
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏, –Ω–µ –∑–∞–≥–∞–ª—å–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞
- –ü—Ä–∏–∫–ª–∞–¥–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ—è—Å–Ω–∏—Ç–∏ —Å–∫–ª–∞–¥–Ω–µ –ø—Ä–∞–≤–∏–ª–æ
- –í—ñ–¥–º—ñ–Ω–∫–∏: Nominative, Accusative, Dative, Genitive"""

        message = client.messages.create(
            model=settings.ANTHROPIC_MODEL, max_tokens=1000, messages=messages, system=system_prompt
        )

        return message.content[0].text
    except Exception as e:
        return f"Anthropic API error: {str(e)}"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Command /start"""
    user_id = update.effective_user.id
    session = get_user_session(user_id)
    session.state = State.IDLE

    keyboard = [
        [InlineKeyboardButton("üéØ –ü–æ—á–∞—Ç–∏ –≤–ø—Ä–∞–≤—É", callback_data="start_exercise")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞", callback_data="help")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = """
üá©üá™ –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –Ω—ñ–º–µ—Ü—å–∫–æ—ó –º–æ–≤–∏.

–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –Ω–∞ –Ω—ñ–º–µ—Ü—å–∫—É –º–æ–≤—É.

–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—á–∞—Ç–∏ –≤–ø—Ä–∞–≤—É" —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏!
"""

    await update.message.reply_text(welcome_text, reply_markup=reply_markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Command /help"""
    help_text = """
üÜò **–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:**

1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—á–∞—Ç–∏ –≤–ø—Ä–∞–≤—É"
2Ô∏è‚É£ –Ø –¥–∞–º –≤–∞–º —Ä–µ—á–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
3Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–µ—Ä–µ–∫–ª–∞–¥ –Ω—ñ–º–µ—Ü—å–∫–æ—é
4Ô∏è‚É£ –Ø –ø–µ—Ä–µ–≤—ñ—Ä—é –ø–µ—Ä–µ–∫–ª–∞–¥ —ñ –¥–∞–º –ø–æ—Ä–∞–¥–∏
5Ô∏è‚É£ –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è

**–ö–æ–º–∞–Ω–¥–∏:**
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
/new - –ù–æ–≤–∞ –≤–ø—Ä–∞–≤–∞

**–ü—ñ–¥ —á–∞—Å –≤–ø—Ä–∞–≤–∏:**
‚Ä¢ –í–≤–µ–¥—ñ—Ç—å "+" –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è
‚Ä¢ –ê–±–æ –∑–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–∫–ª–∞–¥
"""

    keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(help_text, reply_markup=reply_markup, parse_mode="Markdown")


async def new_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Command /new"""
    user_id = update.effective_user.id
    session = get_user_session(user_id)
    session.reset_exercise()
    session.state = State.IDLE

    await start_new_exercise(update, context, user_id)


async def start_new_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    session = get_user_session(user_id)
    session.counter += 1
    session.level = get_random_deutsch_level()
    session.tense = get_random_deutsch_time()
    session.state = State.WAITING_FOR_TRANSLATION

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

    prompt = f"""–°—Ç–≤–æ—Ä–∏ —Ä–µ—á–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–∞ –Ω—ñ–º–µ—Ü—å–∫—É:
- –†—ñ–≤–µ–Ω—å: {session.level.value}
- –ß–∞—Å: {session.tense.value}
- –í–∫–ª—é—á–∏ 1-2 –ø—Ä–∏–∫–º–µ—Ç–Ω–∏–∫–∏ (–¥–ª—è –≤—ñ–¥–º—ñ–Ω—é–≤–∞–Ω–Ω—è), –Ω–µ –±—ñ–ª—å—à–µ!
- –í–∫–ª—é—á–∏ 1-2 –ø—Ä–∏–π–º–µ–Ω–Ω–∏–∫–∏ –∑ –≤—ñ–¥–º—ñ–Ω–∫–∞–º–∏
- –ó—Ä–æ–±–∏ —Ä–µ—á–µ–Ω–Ω—è –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º —Ç–∞ –∫–æ—Ä–∏—Å–Ω–∏–º.
- –†–µ—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 15 —Å–ª—ñ–≤, —â–æ–± –ø–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –∑–∞–π–º–∞–≤ –±–∞–≥–∞—Ç–æ —á–∞—Å—É.

–ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ —Ä–µ—á–µ–Ω–Ω—è."""

    sentence = await call_anthropic(prompt)
    session.current_sentence = sentence
    session.conversation_history = [
        {"role": "user", "content": prompt},
        {"role": "assistant", "content": sentence},
    ]

    message_text = f"""
üìö **–í–ø—Ä–∞–≤–∞ #{session.counter}**
üéØ –†—ñ–≤–µ–Ω—å: {session.level.value}
‚è∞ –ß–∞—Å: {session.tense.value}

üá∫üá¶ **–†–µ—á–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É:**
{sentence}

–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–µ—Ä–µ–∫–ª–∞–¥ –Ω—ñ–º–µ—Ü—å–∫–æ—é –º–æ–≤–æ—é:
"""

    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, parse_mode="Markdown")
    else:
        await update.message.reply_text(message_text, parse_mode="Markdown")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = get_user_session(user_id)
    user_text = update.message.text.strip()

    if session.state == State.IDLE:
        await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏ –∞–±–æ /new –¥–ª—è –Ω–æ–≤–æ—ó –≤–ø—Ä–∞–≤–∏")
        return

    if session.state == State.WAITING_FOR_TRANSLATION:
        await handle_translation(update, context, user_id, user_text)

    elif session.state == State.WAITING_FOR_QUESTION:
        if user_text == "+":
            await start_new_exercise(update, context, user_id)
        else:
            await handle_question(update, context, user_id, user_text)


async def handle_translation(
    update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, user_translation: str
):
    session = get_user_session(user_id)

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

    prompt = f"""–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —Ä–µ—á–µ–Ω–Ω—è: "{session.current_sentence}"
–ú—ñ–π –ø–µ—Ä–µ–∫–ª–∞–¥: "{user_translation}"

–ü–µ—Ä–µ–≤—ñ—Ä –ø–µ—Ä–µ–∫–ª–∞–¥ —Ç–∞:
1. –í–∏–ø—Ä–∞–≤ –ø–æ–º–∏–ª–∫–∏ (*–∫—É—Ä—Å–∏–≤–æ–º* –≤ markdown)
2. –ü–æ—è—Å–Ω–∏ –∫–ª—é—á–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏ —Å—Ç–∏—Å–ª–æ
3. –î–∞–π 1-2 –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ –≥—Ä–∞–º–∞—Ç–∏–∫–∏/—Å—Ç—Ä—É–∫—Ç—É—Ä–∏
4. –í—ñ–¥–º—ñ–Ω–∫–∏ –ø–∏—à–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é: Nominative, Accusative, Dative, Genitive

–Ø–∫—â–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π - –Ω–∞–ø–∏—à–∏ "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!" —Ç–∞ –¥–∞–π –æ–¥–Ω—É –∫–æ—Ä–∏—Å–Ω—É –ø–æ—Ä–∞–¥—É –ø—Ä–æ –≤–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ."""

    session.conversation_history.append({"role": "user", "content": prompt})

    response = await call_anthropic(prompt, session.conversation_history)

    session.conversation_history.append({"role": "assistant", "content": response})
    session.state = State.WAITING_FOR_QUESTION

    keyboard = [
        [InlineKeyboardButton("‚ûï –ù–∞—Å—Ç—É–ø–Ω–µ —Ä–µ—á–µ–Ω–Ω—è", callback_data="next_sentence")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = f"‚úÖ **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É:**\n\n{response}\n\n‚ùì –ú–∞—î—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —ó—Ö, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:"

    await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode="Markdown")


async def handle_question(
    update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, question: str
):
    session = get_user_session(user_id)

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

    prompt = f"–ú–∞—é —É—Ç–æ—á–Ω—é—é—á–µ –ø–∏—Ç–∞–Ω–Ω—è: {question}"

    session.conversation_history.append({"role": "user", "content": prompt})

    response = await call_anthropic(prompt, session.conversation_history)

    session.conversation_history.append({"role": "assistant", "content": response})

    keyboard = [
        [InlineKeyboardButton("‚ûï –ù–∞—Å—Ç—É–ø–Ω–µ —Ä–µ—á–µ–Ω–Ω—è", callback_data="next_sentence")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üí° **–í—ñ–¥–ø–æ–≤—ñ–¥—å:**\n\n{response}", reply_markup=reply_markup, parse_mode="Markdown"
    )


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    session = get_user_session(user_id)

    if query.data == "start_exercise":
        await start_new_exercise(update, context, user_id)

    elif query.data == "next_sentence":
        await start_new_exercise(update, context, user_id)

    elif query.data == "main_menu":
        session.state = State.IDLE
        keyboard = [
            [InlineKeyboardButton("üéØ –ü–æ—á–∞—Ç–∏ –≤–ø—Ä–∞–≤—É", callback_data="start_exercise")],
            [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞", callback_data="help")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = """
üá©üá™ **–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é**

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:
"""
        await query.edit_message_text(
            welcome_text, reply_markup=reply_markup, parse_mode="Markdown"
        )

    elif query.data == "help":
        help_text = """
üÜò **–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:**

1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—á–∞—Ç–∏ –≤–ø—Ä–∞–≤—É"
2Ô∏è‚É£ –Ø –¥–∞–º –≤–∞–º —Ä–µ—á–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
3Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–µ—Ä–µ–∫–ª–∞–¥ –Ω—ñ–º–µ—Ü—å–∫–æ—é
4Ô∏è‚É£ –Ø –ø–µ—Ä–µ–≤—ñ—Ä—é –ø–µ—Ä–µ–∫–ª–∞–¥ —ñ –¥–∞–º –ø–æ—Ä–∞–¥–∏
5Ô∏è‚É£ –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è

**–ö–æ–º–∞–Ω–¥–∏:**
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
/new - –ù–æ–≤–∞ –≤–ø—Ä–∞–≤–∞
"""

        keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode="Markdown")
